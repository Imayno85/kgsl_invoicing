generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstName     String?
  lastName      String?
  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  invoices      Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//  TABLES
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}


model Invoice {
  id String @id @default(uuid())
  invoiceName String
  total Int
  status InvoiceStatus
  date DateTime
  dueDate Int
  fromName String
  fromEmail String
  fromAddress String
  clientName String
  clientEmail String
  clientAddress String
  currency String
  invoiceNumber Int
  note String?
  allowOverpayment Boolean @default(false)

  
  invoiceItemDescription String
  invoiceItemQuantity Int
  invoiceItemRate Int

  // New field to track how much has been paid
  paidAmount Int @default(0)

  // Relation to receipts
  receipts Receipt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User? @relation(fields: [userId], references: [id])
  userId String
}

// New model for receipts
model Receipt {
  id String @id @default(uuid())
  receiptNumber String
  amount Int
  paymentDate DateTime
  paymentMethod String // e.g., "Credit Card", "Bank Transfer", "Cash"
  reference String? // Payment reference or transaction ID
  note String?
  currency String // Add this field to store UGX or USD
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relation to the invoice this receipt belongs to
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String
}

// Updated enum to include PARTIALLY_PAID status
enum InvoiceStatus {
  DRAFT
  PENDING
  PARTIALLY_PAID // Add this status
  PAID
  OVERDUE
  CANCELLED
}